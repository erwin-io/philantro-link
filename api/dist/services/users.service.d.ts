import { ProfileResetPasswordDto, UpdateUserPasswordDto } from "src/core/dto/auth/reset-password.dto";
import { MapDto } from "src/core/dto/map/map.dto";
import { UpdateProfilePictureDto } from "src/core/dto/user/user-base.dto";
import { CreateAdminUserDto, CreateClientUserDto } from "src/core/dto/user/users.create.dto";
import { UpdateClientUserProfileDto, UpdateClientUserDto, UpdateAdminUserDto, UpdateUserProfileDto } from "src/core/dto/user/users.update.dto";
import { FirebaseProvider } from "src/core/provider/firebase/firebase-provider";
import { Access } from "src/db/entities/Access";
import { Notifications } from "src/db/entities/Notifications";
import { UserConversation } from "src/db/entities/UserConversation";
import { UserProfilePic } from "src/db/entities/UserProfilePic";
import { Users } from "src/db/entities/Users";
import { Repository } from "typeorm";
export declare class UsersService {
    private firebaseProvoder;
    private readonly userRepo;
    constructor(firebaseProvoder: FirebaseProvider, userRepo: Repository<Users>);
    getUserPagination({ pageSize, pageIndex, order, columnDef }: {
        pageSize: any;
        pageIndex: any;
        order: any;
        columnDef: any;
    }): Promise<{
        results: Users[];
        total: number;
    }>;
    getUserById(userId: any): Promise<Users>;
    getUserByCode(userCode: any): Promise<Users>;
    createClientUser(dto: CreateClientUserDto): Promise<Users>;
    createAdminUser(dto: CreateAdminUserDto): Promise<Users>;
    updateAdminProfile(userCode: any, dto: UpdateUserProfileDto): Promise<Users>;
    updateClientProfile(userCode: any, dto: UpdateClientUserProfileDto): Promise<{
        totalUnreadNotif: number;
        userId: string;
        userName: string;
        password: string;
        accessGranted: boolean;
        active: boolean;
        userCode: string;
        userType: string;
        name: string;
        email: string;
        currentLocation: object;
        helpNotifPreferences: string[];
        currentOtp: string;
        isVerifiedUser: boolean;
        eventImages: import("../db/entities/EventImage").EventImage[];
        eventMessages: import("../db/entities/EventMessage").EventMessage[];
        eventMessages2: import("../db/entities/EventMessage").EventMessage[];
        events: import("../db/entities/Events").Events[];
        interesteds: import("../db/entities/Interested").Interested[];
        notifications: Notifications[];
        respondeds: import("../db/entities/Responded").Responded[];
        supportTickets: import("../db/entities/SupportTicket").SupportTicket[];
        supportTickets2: import("../db/entities/SupportTicket").SupportTicket[];
        supportTicketMessages: import("../db/entities/SupportTicketMessage").SupportTicketMessage[];
        transactions: import("../db/entities/Transactions").Transactions[];
        userConversations: UserConversation[];
        userConversations2: UserConversation[];
        userOneSignalSubscriptions: import("../db/entities/UserOneSignalSubscription").UserOneSignalSubscription[];
        userProfilePic: UserProfilePic;
        access: Access;
    }>;
    updateProfilePicture(userCode: any, dto: UpdateProfilePictureDto): Promise<Users>;
    updateClientUser(userCode: any, dto: UpdateClientUserDto): Promise<Users>;
    updateAdminUser(userCode: any, dto: UpdateAdminUserDto): Promise<Users>;
    profileResetPassword(userCode: any, dto: ProfileResetPasswordDto): Promise<Users>;
    updateUserPassword(userCode: any, dto: UpdateUserPasswordDto): Promise<Users>;
    deleteUser(userCode: any): Promise<Users>;
    approveAccessRequest(userCode: any): Promise<Users>;
    updateUserLocation(userCode: any, dto: MapDto): Promise<Users>;
}
