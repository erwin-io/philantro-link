import { Events } from "src/db/entities/Events";
import { Notifications } from "src/db/entities/Notifications";
import { Users } from "src/db/entities/Users";
import { Repository, EntityManager } from "typeorm";
import { OneSignalNotificationService } from "./one-signal-notification.service";
import { CreateAssistanceEventDto, CreateCharityVolunteerEventDto, CreateDonationEventDto } from "src/core/dto/events/events.create.dto";
import { UpdateCharityVolunteerEventDto, UpdateDonationEventDto, UpdateAssistanceEventDto, UpdateEventStatusDto, UpdateEventInterestedDto, UpdateEventRespondedDto } from "src/core/dto/events/events.update.dto";
import { Interested } from "src/db/entities/Interested";
import { Responded } from "src/db/entities/Responded";
export declare class EventsService {
    private readonly eventRepo;
    private oneSignalNotificationService;
    constructor(eventRepo: Repository<Events>, oneSignalNotificationService: OneSignalNotificationService);
    getPagination({ pageSize, pageIndex, order, columnDef }: {
        pageSize: any;
        pageIndex: any;
        order: any;
        columnDef: any;
    }): Promise<{
        results: {
            interested: number;
            responded: number;
            raisedDonation: number;
            eventId: string;
            eventCode: string;
            dateTime: Date;
            eventType: string;
            eventName: string;
            eventDesc: string;
            eventLocName: string;
            eventLocMap: object;
            eventAssistanceItems: string[];
            eventStatus: string;
            active: boolean;
            transferType: string;
            transferAccountNumber: string;
            transferAccountName: string;
            donationTargetAmount: string;
            inProgress: boolean;
            eventImages: import("../db/entities/EventImage").EventImage[];
            eventMessages: import("../db/entities/EventMessage").EventMessage[];
            thumbnailFile: import("../db/entities/Files").Files;
            user: Users;
            interesteds: Interested[];
            respondeds: Responded[];
            transactions: import("../db/entities/Transactions").Transactions[];
        }[];
        total: number;
    }>;
    getByCode(eventCode?: string, currentUserCode?: string): Promise<{
        interested: any;
        responded: any;
        raisedDonation: number;
        isCurrentUserResponded: boolean;
        isCurrentUserInterested: boolean;
        eventId: string;
        eventCode: string;
        dateTime: Date;
        eventType: string;
        eventName: string;
        eventDesc: string;
        eventLocName: string;
        eventLocMap: object;
        eventAssistanceItems: string[];
        eventStatus: string;
        active: boolean;
        transferType: string;
        transferAccountNumber: string;
        transferAccountName: string;
        donationTargetAmount: string;
        inProgress: boolean;
        eventImages: import("../db/entities/EventImage").EventImage[];
        eventMessages: import("../db/entities/EventMessage").EventMessage[];
        thumbnailFile: import("../db/entities/Files").Files;
        user: Users;
        interesteds: Interested[];
        respondeds: Responded[];
        transactions: import("../db/entities/Transactions").Transactions[];
    }>;
    createCharityVolunteerEvent(dto: CreateCharityVolunteerEventDto): Promise<Events>;
    createDonationEvent(dto: CreateDonationEventDto): Promise<Events>;
    createAssistanceEvent(dto: CreateAssistanceEventDto): Promise<Events>;
    updateCharityVolunteerEvent(eventCode: any, dto: UpdateCharityVolunteerEventDto): Promise<Events>;
    updateDonationEvent(eventCode: any, dto: UpdateDonationEventDto): Promise<Events>;
    updateAssistanceEvent(eventCode: any, dto: UpdateAssistanceEventDto): Promise<Events>;
    updateStatus(eventCode: any, dto: UpdateEventStatusDto): Promise<Events>;
    updateEventInterested(eventCode: any, dto: UpdateEventInterestedDto): Promise<{
        interested: number;
        eventId: string;
        eventCode: string;
        dateTime: Date;
        eventType: string;
        eventName: string;
        eventDesc: string;
        eventLocName: string;
        eventLocMap: object;
        eventAssistanceItems: string[];
        eventStatus: string;
        active: boolean;
        transferType: string;
        transferAccountNumber: string;
        transferAccountName: string;
        donationTargetAmount: string;
        inProgress: boolean;
        eventImages: import("../db/entities/EventImage").EventImage[];
        eventMessages: import("../db/entities/EventMessage").EventMessage[];
        thumbnailFile: import("../db/entities/Files").Files;
        user: Users;
        interesteds: Interested[];
        respondeds: Responded[];
        transactions: import("../db/entities/Transactions").Transactions[];
    }>;
    updateEventResponded(eventCode: any, dto: UpdateEventRespondedDto): Promise<{
        responded: number;
        eventId: string;
        eventCode: string;
        dateTime: Date;
        eventType: string;
        eventName: string;
        eventDesc: string;
        eventLocName: string;
        eventLocMap: object;
        eventAssistanceItems: string[];
        eventStatus: string;
        active: boolean;
        transferType: string;
        transferAccountNumber: string;
        transferAccountName: string;
        donationTargetAmount: string;
        inProgress: boolean;
        eventImages: import("../db/entities/EventImage").EventImage[];
        eventMessages: import("../db/entities/EventMessage").EventMessage[];
        thumbnailFile: import("../db/entities/Files").Files;
        user: Users;
        interesteds: Interested[];
        respondeds: Responded[];
        transactions: import("../db/entities/Transactions").Transactions[];
    }>;
    logNotification(userIds: string[], data: Events, entityManager: EntityManager, title: string, description: string): Promise<Notifications[]>;
}
